from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import logging

logging.basicConfig(level=logging.INFO)

API_TOKEN = '–í–∞—à_–¢–û–ö–ï–ù_–ó–î–ï–°–¨'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# IDs –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS = {
    "vanya": 1026996176,  # ID –í–∞–Ω–∏
    "olesya": 1083949994  # ID –û–ª–µ—Å–∏
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–∏—à–ª–∏—Å—Ç—ã
states = {}
wishlists = {
    USERS["vanya"]: [],
    USERS["olesya"]: []
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"),
    KeyboardButton("üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏"),
    KeyboardButton("üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏"),
    KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç")
)

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç/–∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.from_user.id not in USERS.values():
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –û–ª–µ—Å–∏ –∏ –í–∞–Ω–∏.")
        return

    states[message.from_user.id] = None
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# –•—ç–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è
@dp.message_handler(lambda message: message.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")
async def add_wishlist(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    states[message.from_user.id] = "adding_wish"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è (–∫–∞–∂–¥–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

@dp.message_handler(lambda message: states.get(message.from_user.id) == "adding_wish")
async def process_wishlist(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    wishes = message.text.split("\n")
    if any(wish.strip() == "" for wish in wishes):
        await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    wishlists[message.from_user.id].extend(wishes)
    states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.reply("–í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! üéâ")

# –•—ç–Ω–¥–ª–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –≤–∏—à–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç")
async def clear_wishlist(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    wishlists[message.from_user.id] = []
    states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.reply("–í–∞—à –≤–∏—à–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! üóë")

# –•—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–æ–≤
@dp.message_handler(lambda message: message.text == "üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏")
async def show_olesya_wishlist(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    wishlist = wishlists[USERS["olesya"]]
    response = "üéÅ –í–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏:\n" + "\n".join(
        f"{i + 1}. {item}" for i, item in enumerate(wishlist)
    ) if wishlist else "–í–∏—à–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç."
    states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.reply(response)

@dp.message_handler(lambda message: message.text == "üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏")
async def show_vanya_wishlist(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    wishlist = wishlists[USERS["vanya"]]
    response = "üéÅ –í–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏:\n" + "\n".join(
        f"{i + 1}. {item}" for i, item in enumerate(wishlist)
    ) if wishlist else "–í–∏—à–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç."
    states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.reply(response)

# –•—ç–Ω–¥–ª–µ—Ä –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def fallback_handler(message: types.Message):
    if message.from_user.id not in USERS.values():
        return

    await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
