from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup
import schedule
import time
import threading
from datetime import datetime

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
BOT_TOKEN = "7903049524:AAGAtPir0J3VsNtWud7yZKsKR5TVmbhh-Rs"
API_ID = 24375354
API_HASH = "bc3f6910f4ba395f0396e68287d3e99c"

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_IDS = {
    "vanya": 1026996176,  # ID –í–∞–Ω–∏
    "olesya": 1083949994  # ID –û–ª–µ—Å–∏
}

# –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
BIRTHDAYS = {
    "vanya": datetime(2003, 4, 4),
    "olesya": datetime(2005, 7, 27)
}

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞
NEW_YEAR = datetime(datetime.now().year, 12, 31)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∂–µ–ª–∞–Ω–∏–π
wishlists = {
    "vanya": [],
    "olesya": []
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π)
user_states = {}

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∂–µ–ª–∞–Ω–∏—è
INVALID_WISH_TEXTS = [
    "üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ",
    "üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏",
    "üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏",
    "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ",
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç",
    "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–æ—Ç–∞
app = Client(
    "wishlist_bot",
    bot_token=BOT_TOKEN,
    api_id=API_ID,
    api_hash=API_HASH
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@app.on_message(filters.command("start"))
def start(client, message):
    user_id = message.from_user.id
    if user_id in USER_IDS.values():
        message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ:\n\n"
            "–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ÑπÔ∏è –ü–æ–º–æ—â—å.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"],
                    ["üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏", "üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏"],
                    ["‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç"],
                    ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
                ],
                resize_keyboard=True
            )
        )
    else:
        message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –í–∞–Ω–∏ –∏ –û–ª–µ—Å–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@app.on_message(filters.command("help"))
def help_command(client, message):
    send_help_message(message)


# –ö–Ω–æ–ø–∫–∞ ‚ÑπÔ∏è –ü–æ–º–æ—â—å
@app.on_message(filters.text & filters.private & filters.regex(r"‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
def help_button(client, message):
    send_help_message(message)


def send_help_message(message):
    message.reply_text(
        "üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç.\n"
        "2. üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏/–í–∞–Ω–∏ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "3. ‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ ‚Äî —É–¥–∞–ª—è–µ—Ç –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–µ–ª–∞–Ω–∏–π –ø–æ –∏—Ö –Ω–æ–º–µ—Ä–∞–º.\n"
        "4. üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç ‚Äî —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
        "5. ‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n\n"
        "üëâ –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∂–µ–ª–∞–Ω–∏–π: 1 3 5\n"
        "üëâ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text & filters.private)
def handle_message(client, message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in USER_IDS.values():
        message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if user_id in user_states:
        state = user_states[user_id]

        if state == "adding_wish":
            add_wish(client, user_id, message)
        elif state == "deleting_wish":
            delete_wish(client, user_id, message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        user_states[user_id] = "adding_wish"
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    elif text == "üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –û–ª–µ—Å–∏":
        view_wishlist(message, "olesya")
    elif text == "üíå –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç –í–∞–Ω–∏":
        view_wishlist(message, "vanya")
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        if not wishlists[get_user_key(user_id)]:
            message.reply_text("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        else:
            user_states[user_id] = "deleting_wish"
            message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∂–µ–ª–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 3 5):")
    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç":
        clear_wishlist(message, user_id)
    else:
        message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ‚ÑπÔ∏è –ü–æ–º–æ—â—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è
def add_wish(client, user_id, message):
    wishlist_key = get_user_key(user_id)

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∂–¥–æ–µ –∂–µ–ª–∞–Ω–∏–µ - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    wishes = [wish.strip() for wish in message.text.splitlines() if wish.strip()]
    if not wishes:
        message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∂–µ–ª–∞–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    filtered_wishes = []
    for wish in wishes:
        if wish in INVALID_WISH_TEXTS or wish in filtered_wishes or wish in wishlists[wishlist_key]:
            continue
        filtered_wishes.append(wish)

    if not filtered_wishes:
        message.reply_text("–í—ã –≤–≤–µ–ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    wishlists[wishlist_key].extend(filtered_wishes)

    message.reply_text("üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
    message.reply_text("\n".join([f"{i+1}. {wish}" for i, wish in enumerate(filtered_wishes)]))

    # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    partner_id = USER_IDS["olesya"] if wishlist_key == "vanya" else USER_IDS["vanya"]
    client.send_message(
        partner_id,
        f"üîî –í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è:\n" + "\n".join([f"- {wish}" for wish in filtered_wishes])
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(user_id, None)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞
def view_wishlist(message, partner_key):
    wishlist = wishlists[partner_key]
    if wishlist:
        text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(wishlist)])
    else:
        text = "–í–∏—à–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç."

    message.reply_text(f"üéÅ –í–∏—à–ª–∏—Å—Ç:\n\n{text}")


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π
def delete_wish(client, user_id, message):
    wishlist_key = get_user_key(user_id)
    numbers = message.text.split()

    try:
        indices = sorted([int(num) - 1 for num in numbers], reverse=True)
        deleted_items = []
        for index in indices:
            if 0 <= index < len(wishlists[wishlist_key]):
                deleted_items.append(wishlists[wishlist_key].pop(index))

        if deleted_items:
            message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ:\n" + "\n".join([f"- {item}" for item in deleted_items]))
        else:
            message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∂–µ–ª–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 2 3).")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(user_id, None)


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤–∏—à–ª–∏—Å—Ç–∞
def clear_wishlist(message, user_id):
    wishlist_key = get_user_key(user_id)
    if wishlists[wishlist_key]:
        wishlists[wishlist_key].clear()
        message.reply_text("üóë –í–∞—à –≤–∏—à–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    else:
        message.reply_text("–í–∞—à –≤–∏—à–ª–∏—Å—Ç —É–∂–µ –ø—É—Å—Ç.")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_key(user_id):
    return "vanya" if user_id == USER_IDS["vanya"] else "olesya"


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app.run()
